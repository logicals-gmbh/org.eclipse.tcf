<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="pmd-stylesheet.xsl"?>
<!--
 For the list of reasons for disabled rules, see http://confluence.ow.ks/display/LC3/PMD+Regeln
 Remember to always update this list when disabling new rules.
-->

<ruleset xmlns:pmd="http://pmd.sourceforge.net/ruleset/2.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         name="pmd5-luna-new"
         xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">
   <description>logicals-pmd5-luna</description>
   <exclude-pattern>./category/java/android.xml</exclude-pattern>
   <exclude-pattern>./category/java/j2ee.xml</exclude-pattern>
   <exclude-pattern>./category/java/logging-jakarta-commons.xml</exclude-pattern>

   <!-- see SAFE-496 -->
   <rule ref="category/java/bestpractices.xml/AccessorMethodGeneration">
      <description>Fields must always be "private".</description>
      <priority>5</priority>
   </rule>
   <!-- see SAFE-496 -->
   <rule ref="category/java/codestyle.xml/ConfusingTernary">
      <description>checked by Checkstyle</description>
      <priority>5</priority>
   </rule>
   <!-- 2017-08-18 | EB | deactivated: see LCOIII-19438  -->
   <rule ref="category/java/design.xml/SimplifyBooleanReturns">
      <description>Often the code is easier to read without observing this rule.</description>
      <priority>5</priority>
   </rule>
   <!-- 2017-08-18 | EB | dectivated: see LCOIII-19438 -->
   <rule ref="category/java/codestyle.xml/UnnecessaryLocalBeforeReturn">
      <description>A local variable with a meaningful name can serve for documentation purposes.</description>
      <priority>5</priority>
   </rule>
   <!-- see SAFE-496 -->
   <rule ref="category/java/bestpractices.xml/JUnitTestContainsTooManyAsserts">
      <description>More efficient, partially better analyzable in case of error, multiple asserts only occur when it makes sense (logically completed test, which has to check several things), Review ensures that completely unrelated asserts are not used.</description>
      <priority>5</priority>
   </rule>
   <rule ref="category/java/codestyle.xml/MethodNamingConventions">
      <description>checked by Checkstyle</description>
      <priority>5</priority>
   </rule>
   <!-- see SAFE-496 -->
   <rule ref="category/java/design.xml/AvoidCatchingGenericException">
      <description>checked by Checkstyle</description>
      <priority>5</priority>
   </rule>
   <!-- 2017-08-18 | EB | deactivated: see LCOIII-19438 -->
   <rule ref="category/java/codestyle.xml/UselessParentheses">
      <priority>5</priority>
   </rule>
   <rule ref="category/java/errorprone.xml/BeanMembersShouldSerialize">
      <description>Not useful. First of all beans are not used in our context. In addition, normal classes are recognized as java beans erroneously.</description>
      <priority>5</priority>
   </rule>
   <!-- <rule ref="category/java/javabeans.xml/BooleanInversion"> removed in PMD 5.3
      <priority>5</priority>
   </rule>-->
   <rule ref="category/java/codestyle.xml/DefaultPackage">
      <description>Package-Private scope only can be achieved via default-Scope. Package-Private is needed for unit tests.</description>
      <priority>5</priority>
   </rule>
   <rule ref="category/java/codestyle.xml/AtLeastOneConstructor">
      <description>Default-Konstruktor should not be defined explicitly.</description>
      <priority>5</priority>
   </rule>
   <rule ref="category/java/codestyle.xml/AvoidFinalLocalVariable">
      <description>Not all final variables should be declared as a field (member). A final variable that is only used in one method should also be declared there.</description>
      <priority>5</priority>
   </rule>
   <rule ref="category/java/errorprone.xml/AvoidLiteralsInIfCondition">
      <description>"null" is recognized as literal erroneously Example: The rule reports an error in the construct if(something == null), but this is okay</description>
      <priority>5</priority>
   </rule>
   <rule ref="category/java/errorprone.xml/DataflowAnomalyAnalysis">
      <description>Rule reports "false positives". Thus it is not practicable.</description>
      <priority>5</priority>
   </rule>
   <rule ref="category/java/multithreading.xml/UseConcurrentHashMap">
      <description>Rule reports "false positives". Thus it is not practicable. (e.g. Map&lt;String, String&gt; myMap = new ConcurrentHashMap&lt;String, String&gt;();).</description>
      <priority>5</priority>
   </rule>
   <rule ref="category/java/codestyle.xml/OnlyOneReturn">
      <description>Return statements are checked by Checkstyle</description>
      <priority>5</priority>
   </rule>
   <rule ref="category/java/documentation.xml/CommentRequired">
      <description>There should only be comments that provide added value.</description>
      <priority>5</priority>
   </rule>
   <rule ref="category/java/documentation.xml/CommentSize">
      <description>checked by Checkstyle and applied by formatter</description>
      <priority>5</priority>
   </rule>
   <rule ref="category/java/codestyle.xml/CommentDefaultAccessModifier">
      <description>Not compliant with our coding guidelines</description>
      <priority>5</priority>
   </rule>
   <rule ref="category/java/design.xml/NPathComplexity">
      <description>checked by Checkstyle</description>
      <priority>5</priority>
   </rule>
   <rule ref="category/java/design.xml/ExcessiveMethodLength">
      <description>checked by Checkstyle</description>
      <priority>5</priority>
   </rule>
   <rule ref="category/java/design.xml/TooManyMethods">
      <description>already checked with checkstyle [Warnung (!)] nur dann, wenn die Regel aktiviert wird!</description>
      <priority>5</priority>
   </rule>
   <rule ref="category/java/design.xml/LawOfDemeter">
      <description>Substantial effort for configuration, control is done by review.</description>
      <priority>5</priority>
   </rule>
   <rule ref="category/java/design.xml/LoosePackageCoupling">
      <description>Substantial effort for configuration, control is done by review.</description>
      <priority>5</priority>
   </rule>
   <rule ref="category/java/errorprone.xml/MissingBreakInSwitch">
      <description>checked by Checkstyle</description>
      <priority>5</priority>
   </rule>
   <rule ref="category/java/design.xml/CyclomaticComplexity">
      <description>checked by Checkstyle</description>
      <priority>5</priority>
   </rule>
   <rule ref="category/java/codestyle.xml/LongVariable">
      <description>Sometimes long variable names are necessary to describe the contents of the variable correctly.</description>
      <priority>5</priority>
   </rule>
   <rule ref="category/java/codestyle.xml/LocalVariableCouldBeFinal">
      <description>Declaring everything "final" contradicts the clean code guidelines.</description>
      <priority>5</priority>
   </rule>
   <rule ref="category/java/codestyle.xml/MethodArgumentCouldBeFinal">
      <description>Declaring everything "final" contradicts the clean code guidelines.</description>
      <priority>5</priority>
   </rule>
   <rule ref="category/java/performance.xml/SimplifyStartsWith">
      <description>clean code is more important than performance optimization</description>
      <priority>5</priority>
   </rule>
   <rule ref="category/java/performance.xml/AvoidInstantiatingObjectsInLoops">
      <description>Often objects have to be created in loops.</description>
      <priority>5</priority>
   </rule>
   <rule ref="category/java/codestyle.xml/DuplicateImports">
      <description>checked by Checkstyle</description>
      <priority>5</priority>
   </rule>
   <rule ref="category/java/bestpractices.xml/UnusedImports">
      <description>checked by Checkstyle</description>
	  <priority>5</priority>
   </rule>
   <rule ref="category/java/codestyle.xml/UnnecessaryFullyQualifiedName">
      <description>Rule does not work correctly</description>
      <priority>5</priority>
   </rule>
   <rule ref="category/java/errorprone.xml/LoggerIsNotStaticFinal">
      <description>This rule cannot be aplied due to the E4 Dependency Injection</description>
      <priority>5</priority>
   </rule>
   <rule ref="category/java/codestyle.xml/UselessParentheses">
      <description>Often the code is easier to read without observing this rule</description>
      <priority>5</priority>
   </rule>

   <rule ref="category/java/codestyle.xml/TooManyStaticImports">
      <description>Unnecessary, because complexity of coupling is checked via other rules</description>
      <priority>5</priority>
   </rule>

   <rule ref="category/java/design.xml/ExcessiveImports">
      <description>Unnecessary, because complexity of coupling is checked via other rules</description>
      <priority>5</priority>
   </rule>

   <rule ref="category/java/design.xml/DataClass">
      <description>Data classes are ok for us</description>
      <priority>5</priority>
   </rule>

   <rule ref="category/java/bestpractices.xml/AbstractClassWithoutAbstractMethod"/>
   <rule ref="category/java/bestpractices.xml/AccessorClassGeneration"/>
   <rule ref="category/java/bestpractices.xml/ArrayIsStoredDirectly"/>
   <rule ref="category/java/bestpractices.xml/AvoidPrintStackTrace"/>
   <rule ref="category/java/bestpractices.xml/AvoidReassigningParameters"/>
   <rule ref="category/java/bestpractices.xml/AvoidStringBufferField"/>
   <rule ref="category/java/bestpractices.xml/AvoidUsingHardCodedIP"/>
   <rule ref="category/java/bestpractices.xml/CheckResultSet"/>
   <rule ref="category/java/bestpractices.xml/ConstantsInInterface"/>
   <rule ref="category/java/bestpractices.xml/DefaultLabelNotLastInSwitchStmt"/>
   <rule ref="category/java/bestpractices.xml/ForLoopCanBeForeach"/>
   <rule ref="category/java/bestpractices.xml/GuardLogStatement">
     <properties>
       <property name="guardsMethods" value="isTraceEnabled,isDebugEnabled,isInfoEnabled,isWarnEnabled,isErrorEnabled,isLoggable,isEnabledFor"/>
       <property name="logLevels" value="trace,debug,warn,log,finest,finer,fine,severe"/>
     </properties>
   </rule>
   <rule ref="category/java/bestpractices.xml/JUnit4SuitesShouldUseSuiteAnnotation"/>
   <rule ref="category/java/bestpractices.xml/JUnit4TestShouldUseAfterAnnotation"/>
   <rule ref="category/java/bestpractices.xml/JUnit4TestShouldUseBeforeAnnotation"/>
   <rule ref="category/java/bestpractices.xml/JUnit4TestShouldUseTestAnnotation"/>
   <rule ref="category/java/bestpractices.xml/JUnitAssertionsShouldIncludeMessage"/>
   <rule ref="category/java/bestpractices.xml/JUnitTestsShouldIncludeAssert"/>
   <rule ref="category/java/bestpractices.xml/JUnitUseExpected"/>
   <rule ref="category/java/bestpractices.xml/LooseCoupling"/>
   <rule ref="category/java/bestpractices.xml/MethodReturnsInternalArray"/>
   <rule ref="category/java/bestpractices.xml/MissingOverride"/>
   <rule ref="category/java/bestpractices.xml/OneDeclarationPerLine"/>
   <rule ref="category/java/bestpractices.xml/PositionLiteralsFirstInCaseInsensitiveComparisons"/>
   <rule ref="category/java/bestpractices.xml/PositionLiteralsFirstInComparisons"/>
   <rule ref="category/java/bestpractices.xml/PreserveStackTrace"/>
   <rule ref="category/java/bestpractices.xml/ReplaceEnumerationWithIterator"/>
   <rule ref="category/java/bestpractices.xml/ReplaceHashtableWithMap"/>
   <rule ref="category/java/bestpractices.xml/ReplaceVectorWithList"/>
   <rule ref="category/java/bestpractices.xml/SwitchStmtsShouldHaveDefault"/>
   <rule ref="category/java/bestpractices.xml/SystemPrintln"/>
   <rule ref="category/java/bestpractices.xml/UnusedFormalParameter">
      <properties>
        <property name="checkAll" value="true" />
    </properties>
   </rule>
   <rule ref="category/java/bestpractices.xml/UnusedLocalVariable"/>
   <rule ref="category/java/bestpractices.xml/UnusedPrivateField"/>
   <rule ref="category/java/bestpractices.xml/UnusedPrivateMethod"/>
   <rule ref="category/java/bestpractices.xml/UseAssertEqualsInsteadOfAssertTrue"/>
   <rule ref="category/java/bestpractices.xml/UseAssertNullInsteadOfAssertTrue"/>
   <rule ref="category/java/bestpractices.xml/UseAssertSameInsteadOfAssertTrue"/>
   <rule ref="category/java/bestpractices.xml/UseAssertTrueInsteadOfAssertEquals"/>
   <rule ref="category/java/bestpractices.xml/UseCollectionIsEmpty"/>
   <rule ref="category/java/bestpractices.xml/UseVarargs"/>
   <rule ref="category/java/codestyle.xml/AvoidDollarSigns"/>
   <rule ref="category/java/codestyle.xml/AvoidProtectedFieldInFinalClass"/>
   <rule ref="category/java/codestyle.xml/AvoidProtectedMethodInFinalClassNotExtending"/>
   <rule ref="category/java/codestyle.xml/AvoidUsingNativeCode"/>
   <rule ref="category/java/codestyle.xml/BooleanGetMethodName"/>
   <rule ref="category/java/codestyle.xml/CallSuperInConstructor"/>
   <rule ref="category/java/codestyle.xml/ClassNamingConventions">
     <properties>
       <property name="utilityClassPattern" value="[A-Z][a-zA-Z0-9]*"/>
     </properties>
   </rule>
   <rule ref="category/java/codestyle.xml/ControlStatementBraces"/>
   <rule ref="category/java/codestyle.xml/DontImportJavaLang"/>
   <rule ref="category/java/codestyle.xml/EmptyMethodInAbstractClassShouldBeAbstract"/>
   <rule ref="category/java/codestyle.xml/ExtendsObject"/>
   <rule ref="category/java/codestyle.xml/FieldDeclarationsShouldBeAtStartOfClass"/>
   <rule ref="category/java/codestyle.xml/FieldNamingConventions"/>
   <rule ref="category/java/codestyle.xml/ForLoopShouldBeWhileLoop"/>
   <rule ref="category/java/codestyle.xml/GenericsNaming"/>
   <rule ref="category/java/codestyle.xml/IdenticalCatchBranches"/>
   <rule ref="category/java/codestyle.xml/LinguisticNaming"/>
   <rule ref="category/java/codestyle.xml/LocalVariableNamingConventions"/>
   <rule ref="category/java/codestyle.xml/NoPackage"/>
   <rule ref="category/java/codestyle.xml/PackageCase"/>
   <rule ref="category/java/codestyle.xml/PrematureDeclaration"/>
   <rule ref="category/java/codestyle.xml/ShortClassName"/>
   <rule ref="category/java/codestyle.xml/ShortMethodName"/>
   <rule ref="category/java/codestyle.xml/ShortVariable"/>
   <rule ref="category/java/codestyle.xml/UnnecessaryAnnotationValueElement"/>
   <rule ref="category/java/codestyle.xml/UnnecessaryConstructor"/>
   <rule ref="category/java/codestyle.xml/UnnecessaryModifier"/>
   <rule ref="category/java/codestyle.xml/UnnecessaryReturn"/>
   <rule ref="category/java/codestyle.xml/UselessQualifiedThis"/>
   <rule ref="category/java/design.xml/AbstractClassWithoutAnyMethod"/>
   <rule ref="category/java/design.xml/AvoidDeeplyNestedIfStmts"/>
   <rule ref="category/java/design.xml/AvoidRethrowingException"/>
   <rule ref="category/java/design.xml/AvoidThrowingNewInstanceOfSameException"/>
   <rule ref="category/java/design.xml/AvoidThrowingNullPointerException"/>
   <rule ref="category/java/design.xml/AvoidThrowingRawExceptionTypes"/>
   <rule ref="category/java/design.xml/ClassWithOnlyPrivateConstructorsShouldBeFinal"/>
   <rule ref="category/java/design.xml/CollapsibleIfStatements"/>
   <rule ref="category/java/design.xml/CouplingBetweenObjects"/>
   <rule ref="category/java/design.xml/DoNotExtendJavaLangError"/>
   <rule ref="category/java/design.xml/ExceptionAsFlowControl"/>
   <rule ref="category/java/design.xml/ExcessiveClassLength">
     <properties>
       <property name="minimum" value="400"/>
     </properties>
   </rule>
   <rule ref="category/java/design.xml/ExcessiveParameterList"/>
   <rule ref="category/java/design.xml/ExcessivePublicCount"/>
   <rule ref="category/java/design.xml/FinalFieldCouldBeStatic"/>
   <rule ref="category/java/design.xml/GodClass"/>
   <rule ref="category/java/design.xml/ImmutableField"/>
   <rule ref="category/java/design.xml/LogicInversion"/>
   <rule ref="category/java/design.xml/NcssCount"/>
   <rule ref="category/java/design.xml/SignatureDeclareThrowsException"/>
   <rule ref="category/java/design.xml/SimplifiedTernary"/>
   <rule ref="category/java/design.xml/SimplifyBooleanAssertion"/>
   <rule ref="category/java/design.xml/SimplifyBooleanExpressions"/>
   <rule ref="category/java/design.xml/SimplifyConditional"/>
   <rule ref="category/java/design.xml/SingularField"/>
   <rule ref="category/java/design.xml/SwitchDensity"/>
   <rule ref="category/java/design.xml/TooManyFields"/>
   <rule ref="category/java/design.xml/UseObjectForClearerAPI"/>
   <rule ref="category/java/design.xml/UseUtilityClass"/>
   <rule ref="category/java/design.xml/UselessOverridingMethod"/>
   <rule ref="category/java/documentation.xml/CommentContent"/>
   <rule ref="category/java/documentation.xml/UncommentedEmptyConstructor"/>
   <rule ref="category/java/documentation.xml/UncommentedEmptyMethodBody"/>
   <rule ref="category/java/errorprone.xml/AssignmentInOperand"/>
   <rule ref="category/java/errorprone.xml/AssignmentToNonFinalStatic"/>
   <rule ref="category/java/errorprone.xml/AvoidAccessibilityAlteration"/>
   <rule ref="category/java/errorprone.xml/AvoidAssertAsIdentifier"/>
   <rule ref="category/java/errorprone.xml/AvoidBranchingStatementAsLastInLoop"/>
   <rule ref="category/java/errorprone.xml/AvoidCallingFinalize"/>
   <rule ref="category/java/errorprone.xml/AvoidCatchingNPE"/>
   <rule ref="category/java/errorprone.xml/AvoidCatchingThrowable"/>
   <rule ref="category/java/errorprone.xml/AvoidDecimalLiteralsInBigDecimalConstructor"/>
   <rule ref="category/java/errorprone.xml/AvoidDuplicateLiterals"/>
   <rule ref="category/java/errorprone.xml/AvoidEnumAsIdentifier"/>
   <rule ref="category/java/errorprone.xml/AvoidFieldNameMatchingMethodName"/>
   <rule ref="category/java/errorprone.xml/AvoidFieldNameMatchingTypeName"/>
   <rule ref="category/java/errorprone.xml/AvoidInstanceofChecksInCatchClause"/>
   <rule ref="category/java/errorprone.xml/AvoidLosingExceptionInformation"/>
   <rule ref="category/java/errorprone.xml/AvoidMultipleUnaryOperators"/>
   <rule ref="category/java/errorprone.xml/AvoidUsingOctalValues"/>
   <rule ref="category/java/errorprone.xml/BadComparison"/>
   <rule ref="category/java/errorprone.xml/BrokenNullCheck"/>
   <rule ref="category/java/errorprone.xml/CheckSkipResult"/>
   <rule ref="category/java/errorprone.xml/ClassCastExceptionWithToArray"/>
   <rule ref="category/java/errorprone.xml/CloneMethodMustBePublic"/>
   <rule ref="category/java/errorprone.xml/CloneMethodMustImplementCloneable"/>
   <rule ref="category/java/errorprone.xml/CloneMethodReturnTypeMustMatchClassName"/>
   <rule ref="category/java/errorprone.xml/CloneThrowsCloneNotSupportedException"/>
   <rule ref="category/java/errorprone.xml/CloseResource"/>
   <rule ref="category/java/errorprone.xml/CompareObjectsWithEquals"/>
   <rule ref="category/java/errorprone.xml/ConstructorCallsOverridableMethod"/>
   <rule ref="category/java/errorprone.xml/DoNotCallGarbageCollectionExplicitly"/>
   <rule ref="category/java/errorprone.xml/DoNotExtendJavaLangThrowable"/>
   <rule ref="category/java/errorprone.xml/DoNotThrowExceptionInFinally"/>
   <rule ref="category/java/errorprone.xml/DontImportSun"/>
   <rule ref="category/java/errorprone.xml/DontUseFloatTypeForLoopIndices"/>
   <rule ref="category/java/errorprone.xml/EmptyFinalizer"/>
   <rule ref="category/java/errorprone.xml/EmptyFinallyBlock"/>
   <rule ref="category/java/errorprone.xml/EmptyIfStmt"/>
   <rule ref="category/java/errorprone.xml/EmptyInitializer"/>
   <rule ref="category/java/errorprone.xml/EmptyStatementBlock"/>
   <rule ref="category/java/errorprone.xml/EmptyStatementNotInLoop"/>
   <rule ref="category/java/errorprone.xml/EmptySwitchStatements"/>
   <rule ref="category/java/errorprone.xml/EmptySynchronizedBlock"/>
   <rule ref="category/java/errorprone.xml/EmptyTryBlock"/>
   <rule ref="category/java/errorprone.xml/EmptyWhileStmt"/>
   <rule ref="category/java/errorprone.xml/EqualsNull"/>
   <rule ref="category/java/errorprone.xml/FinalizeDoesNotCallSuperFinalize"/>
   <rule ref="category/java/errorprone.xml/FinalizeOnlyCallsSuperFinalize"/>
   <rule ref="category/java/errorprone.xml/FinalizeOverloaded"/>
   <rule ref="category/java/errorprone.xml/FinalizeShouldBeProtected"/>
   <rule ref="category/java/errorprone.xml/IdempotentOperations"/>
   <rule ref="category/java/errorprone.xml/ImportFromSamePackage"/>
   <rule ref="category/java/errorprone.xml/InstantiationToGetClass"/>
   <rule ref="category/java/errorprone.xml/InvalidSlf4jMessageFormat">
     <priority>4</priority>
   </rule>
   <rule ref="category/java/errorprone.xml/JUnitSpelling"/>
   <rule ref="category/java/errorprone.xml/JUnitStaticSuite"/>
   <rule ref="category/java/errorprone.xml/JumbledIncrementer"/>
   <rule ref="category/java/errorprone.xml/MethodWithSameNameAsEnclosingClass"/>
   <rule ref="category/java/errorprone.xml/MisplacedNullCheck"/>
   <rule ref="category/java/errorprone.xml/MissingBreakInSwitch"/>
   <rule ref="category/java/errorprone.xml/MissingSerialVersionUID"/>
   <rule ref="category/java/errorprone.xml/MissingStaticMethodInNonInstantiatableClass"/>
   <rule ref="category/java/errorprone.xml/MoreThanOneLogger"/>
   <rule ref="category/java/errorprone.xml/NonCaseLabelInSwitchStatement"/>
   <rule ref="category/java/errorprone.xml/NonStaticInitializer"/>
   <rule ref="category/java/errorprone.xml/NullAssignment"/>
   <rule ref="category/java/errorprone.xml/OverrideBothEqualsAndHashcode"/>
   <rule ref="category/java/errorprone.xml/ProperCloneImplementation"/>
   <rule ref="category/java/errorprone.xml/ReturnEmptyArrayRatherThanNull"/>
   <rule ref="category/java/errorprone.xml/ReturnFromFinallyBlock"/>
   <rule ref="category/java/errorprone.xml/SimpleDateFormatNeedsLocale"/>
   <rule ref="category/java/errorprone.xml/SingleMethodSingleton"/>
   <rule ref="category/java/errorprone.xml/SingletonClassReturningNewInstance"/>
   <rule ref="category/java/errorprone.xml/StringBufferInstantiationWithChar"/>
   <rule ref="category/java/errorprone.xml/SuspiciousEqualsMethodName"/>
   <rule ref="category/java/errorprone.xml/SuspiciousHashcodeMethodName"/>
   <rule ref="category/java/errorprone.xml/SuspiciousOctalEscape"/>
   <rule ref="category/java/errorprone.xml/TestClassWithoutTestCases"/>
   <rule ref="category/java/errorprone.xml/UnconditionalIfStatement"/>
   <rule ref="category/java/errorprone.xml/UnnecessaryBooleanAssertion"/>
   <rule ref="category/java/errorprone.xml/UnnecessaryCaseChange"/>
   <rule ref="category/java/errorprone.xml/UnnecessaryConversionTemporary"/>
   <rule ref="category/java/errorprone.xml/UnusedNullCheckInEquals"/>
   <rule ref="category/java/errorprone.xml/UseEqualsToCompareStrings"/>
   <rule ref="category/java/errorprone.xml/UseLocaleWithCaseConversions"/>
   <rule ref="category/java/errorprone.xml/UselessOperationOnImmutable"/>
   <rule ref="category/java/multithreading.xml/AvoidSynchronizedAtMethodLevel"/>
   <rule ref="category/java/multithreading.xml/AvoidThreadGroup"/>
   <rule ref="category/java/multithreading.xml/AvoidUsingVolatile"/>
   <rule ref="category/java/multithreading.xml/DontCallThreadRun"/>
   <rule ref="category/java/multithreading.xml/DoubleCheckedLocking"/>
   <rule ref="category/java/multithreading.xml/NonThreadSafeSingleton"/>
   <rule ref="category/java/multithreading.xml/UnsynchronizedStaticDateFormatter"/>
   <rule ref="category/java/multithreading.xml/UseNotifyAllInsteadOfNotify"/>
   <rule ref="category/java/performance.xml/AddEmptyString"/>
   <rule ref="category/java/performance.xml/AppendCharacterWithChar"/>
   <rule ref="category/java/performance.xml/AvoidArrayLoops"/>
   <rule ref="category/java/performance.xml/AvoidFileStream"/>
   <rule ref="category/java/performance.xml/AvoidUsingShortType"/>
   <rule ref="category/java/performance.xml/BigIntegerInstantiation"/>
   <rule ref="category/java/performance.xml/BooleanInstantiation"/>
   <rule ref="category/java/performance.xml/ByteInstantiation"/>
   <rule ref="category/java/performance.xml/ConsecutiveAppendsShouldReuse"/>
   <rule ref="category/java/performance.xml/ConsecutiveLiteralAppends"/>
   <rule ref="category/java/performance.xml/InefficientEmptyStringCheck"/>
   <rule ref="category/java/performance.xml/InefficientStringBuffering"/>
   <rule ref="category/java/performance.xml/InsufficientStringBufferDeclaration"/>
   <rule ref="category/java/performance.xml/IntegerInstantiation"/>
   <rule ref="category/java/performance.xml/LongInstantiation"/>
   <rule ref="category/java/performance.xml/OptimizableToArrayCall"/>
   <rule ref="category/java/performance.xml/RedundantFieldInitializer"/>
   <rule ref="category/java/performance.xml/ShortInstantiation"/>
   <rule ref="category/java/performance.xml/StringInstantiation"/>
   <rule ref="category/java/performance.xml/StringToString"/>
   <rule ref="category/java/performance.xml/TooFewBranchesForASwitchStatement"/>
   <rule ref="category/java/performance.xml/UnnecessaryWrapperObjectCreation"/>
   <rule ref="category/java/performance.xml/UseArrayListInsteadOfVector"/>
   <rule ref="category/java/performance.xml/UseArraysAsList"/>
   <rule ref="category/java/performance.xml/UseIndexOfChar"/>
   <rule ref="category/java/performance.xml/UseStringBufferForStringAppends"/>
   <rule ref="category/java/performance.xml/UseStringBufferLength"/>
   <rule ref="category/java/performance.xml/UselessStringValueOf"/>
   <rule ref="category/java/security.xml/HardCodedCryptoKey"/>
   <rule ref="category/java/security.xml/InsecureCryptoIv"/>
</ruleset>
